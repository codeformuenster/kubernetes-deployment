<configuration>

  <!--
    This suppresses the meta-log entries about Logback configuration (how Java).
    This is a stopgap measure.
    The right solution is to make sure there are not logback.xml files from our dependency libraries on the classpath.
   -->
  <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

  <!-- This will push these level changes onto JUL. Otherwise, JUL defaults to a high threshold
       for logging and debug log messages will never make it to slf4j. -->
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>

  <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <!-- print out file and line number in parenthesis, which Eclipse and IDEA will link -->
      <pattern>%d{HH:mm:ss.SSS} %level \(%F:%L\) %msg%n</pattern>
    </encoder>
  </appender>
  <appender name="Sentry" class="io.sentry.logback.SentryAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>WARN</level>
    </filter>
  </appender>

  <appender name="TaggedStopsLog" class="ch.qos.logback.classic.sift.SiftingAppender">
    <discriminator>
      <key>routerPath</key>
      <defaultValue>.</defaultValue>
    </discriminator>
    <sift>
      <appender name="TaggedStopsLog-${routerPath}" class="ch.qos.logback.core.FileAppender">
        <file>${routerPath}/taggedStops.log</file>
        <append>false</append>
        <!-- set immediateFlush to false for much higher logging throughput -->
        <immediateFlush>false</immediateFlush>
        <!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <encoder>
          <pattern>%msg%n</pattern>
        </encoder>
    </appender>
  </sift>
</appender>

  <!-- Change this to debug to let more messages through. -->
  <root level="debug">
    <appender-ref ref="stdout" />
    <appender-ref ref="Sentry" />
  </root>
  <logger name="ch.qos.logback" level="warn"/>
  <logger name="com.amazonaws" level="info"/>
  <logger name="org.apache.http" level="info" />
  <logger name="com.conveyal" level="info"/>
  <!-- for now disable realtime logging, leave only statistics -->
  <logger name="org.opentripplanner.updater.bike_rental.SmooveBikeRentalDataSource" level="warn" />
  <logger name="org.opentripplanner.updater.bike_rental.SamocatScooterRentalDataSource" level="warn" />
  <logger name="org.opentripplanner.updater.bike_rental.SharingOSBikeRentalDataSource" level="warn" />
  <logger name="org.opentripplanner.updater.bike_rental.NextBikeRentalDataSource" level="warn" />
  <logger name="org.opentripplanner.updater.bike_rental.BikeRentalUpdater" level="warn" />
  <logger name="org.opentripplanner.updater.stoptime.TimetableSnapshotSource" level="error" />
  <logger name="org.opentripplanner.updater.stoptime.TimetableSnapshotSource$GtfsRealtimeStatistics" level="debug" />
  <logger name="org.opentripplanner.routing.edgetype.Timetable" level="off" />
  <logger name="org.opentripplanner.routing.trippattern.TripTimes" level="off" />
  <!-- /for now disable realtime logging, leave only statistics -->
  <logger name="org.opentripplanner.graph_builder.module.DirectTransferGenerator" level="info" />
  <logger name="org.opentripplanner" level="info" />
  <logger name="org.opentripplanner.analyst" level="info" />
  <logger name="org.opentripplanner.routing" level="info" />
  <logger name="com.getsentry" level="off"/>
  <logger name="org.opentripplanner.routing.impl.RetryingPathServiceImpl" level="info" />
  <logger name="org.opentripplanner.routing.algorithm.GenericAStar" level="info" />
  <!-- Avoid printing debug messages about free-flowing vertices -->
  <logger name="org.opentripplanner.routing.vertextype.IntersectionVertex" level="info" />
  <!-- Avoid printing debug messages when walk limits are exceeded -->
  <logger name="org.opentripplanner.routing.edgetype.PlainStreetEdge" level="info" />
  <!-- Avoid printing info messages about calendars when building graph -->
  <logger name="org.onebusaway.gtfs.impl.calendar.CalendarServiceDataFactoryImpl" level="warn" />
  <!-- Avoid printing ugly warning message when unable to create websocket connection -->
  <logger name="com.ning.http.client.providers.netty.NettyAsyncHttpProvider" level="error" />
  <logger name="com.sun.jersey" level="warn" />
  <!-- Suppress an inconsequential IOException that is logged at debug level. -->
  <logger name="org.glassfish.grizzly" level="info" />
  <logger name="org.opentripplanner.graph_builder.module.TransitToTaggedStopsModule" level="debug" additivity="false">
    <appender-ref ref="TaggedStopsLog"/>
  </logger>
  <logger name="org.opentripplanner.graph_builder.module.HSLVertexConnector" level="debug" additivity="false">
    <appender-ref ref="TaggedStopsLog"/>
  </logger>
  <logger name="org.opentripplanner.graph_builder.module.DefaultVertexConnector" level="debug" additivity="false">
    <appender-ref ref="TaggedStopsLog"/>
  </logger>

</configuration>
