apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: events-v0-sensor
  labels:
    sensors.argoproj.io/sensor-controller-instanceid: argo-events
    # sensor controller will use this label to match with it's own version
    # do not remove
    argo-events-sensor-version: v0.10
spec:
  template:
    spec:
      containers:
      - name: "sensor"
        image: "argoproj/sensor:v0.10"
      serviceAccountName: argo-events-sa
  dependencies:
  - name: "webhook-gateway:events-v0"
  eventProtocol:
    type: "HTTP"
    http:
      port: "9300"
  triggers:
  # - template:
  #     name: webhook-workflow-trigger
  #     group: argoproj.io
  #     version: v1alpha1
  #     kind: Workflow
  #     source:
  #       inline: |
  #         apiVersion: argoproj.io/v1alpha1
  #         kind: Workflow
  #         metadata:
  #           generateName: events-v0-
  #         spec:
  #           entrypoint: whalesay
  #           arguments:
  #             parameters:
  #             - name: message
  #               # this is the value that should be overridden
  #               value: hello world
  #           templates:
  #           - name: whalesay
  #             inputs:
  #               parameters:
  #               - name: message
  #             container:
  #               image: docker/whalesay:latest
  #               command: [cowsay]
  #               args: ["events-0 {{inputs.parameters.message}}"]

  - template:
      name: webhook-workflow-trigger
      group: argoproj.io
      version: v1alpha1
      kind: Workflow
      source:
        # inline: |
        resource:
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            generateName: event-v0-
          spec:
            # entrypoint: diamond
            entrypoint: coinflip

            arguments:
              parameters:
              - name: message
                # this is the value that should be overridden
                value: hello world

            templates:
            # **dag** https://github.com/argoproj/argo/blob/master/examples/dag-daemon-task.yaml

            # - name: diamond
            #   dag:
            #     tasks:
            #     # - name: schema-org-convert
            #     #   template: schema-org-convert
            #     #   arguments:
            #     #     parameters: 
            #     #     - name: message
            #     #       value: "{{steps.generate.outputs.result}}"
            #     - name: hash-id
            #       # dependencies: [schema-org-convert]
            #       template: hash-id
            #       arguments:
            #         parameters: [{name: message, value: B}]
            #     # - name: geocode
            #     #   dependencies: [A]
            #     #   template: echo
            #     #   arguments:
            #     #     parameters: [{name: message, value: C}]
            #     - name: whalesay
            #       dependencies: [hash-id]
            #       template: whalesay
            #       arguments:
            #         parameters: [{name: message, value: "{{tasks.hash-id.outputs.result}}"}]

            - name: coinflip
              steps:
              # - - name: flip-coin
              #     template: flip-coin
              - - name: generate
                  template: hash-id
                  # when: "{{steps.flip-coin.outputs.result}} == heads"
              - - name: whalesay-step
                  # template: whalesay
                  template: print-message

                  # when: "{{steps.flip-coin.outputs.result}} == tails"
                  # dependencies: [hash-id]
                  arguments:
                    parameters:
                      - name: message
                        value: "{{steps.generate.outputs.result}}"

            # - name: schema-org-convert

            - name: hash-id
              script:
                image: python:alpine3.8
                command: [python]
                source: |
                  import random
                  import json
                  i = random.randint(1, 100)
                  print(i)
              # outputs:
              # - name: hello-param
              #   valueFrom:
              #     path: /tmp/hello_world.txt

            # - name: geocode

            - name: whalesay
              inputs:
                parameters:
                - name: message
              container:
                image: docker/whalesay:latest
                command: [cowsay]
                # args: ["[event-0] {{inputs.parameters.message}}"]
                args: ["{{inputs.parameters.message}}"]

            # - name: store-if-new

            - name: print-message
              inputs:
                parameters:
                - name: message
              container:
                image: alpine:latest
                command: [sh, -c]
                args: ["echo result was: {{inputs.parameters.message}}"]

    resourceParameters:
    - src:
        event: "webhook-gateway:events-v0"
      dest: spec.arguments.parameters.0.value
